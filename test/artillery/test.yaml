config:
  target: "http://localhost:5000"
  socketio:
    # query: "id=cUW7OXP624yUTJT"
  phases:
    # # 8초 동안 60명의 사용자가 요청 = 480번의 요청
    # - arrivalRate: 60     # 가상 사용자 수 = 쓰레드 수
    #   duration: 8         # second
    # 1초 동안 100명의 사용자가 요청 = 100번의 요청
    - arrivalRate: 100     # 가상 사용자 수 = 쓰레드 수
      duration: 1         # second
  payload:
    path: "./data.csv"
    fields:
      user_id: "{{user_id}}"
      biz_price: "{{biz_price}}"
scenarios:
  - name: "connect and biz "
    engine: "socketio"
    flow:
      - emit:
          channel: "sendPrice"
          data:
            "user_id": "{{user_id}}"
            "biz_price": "{{biz_price}}}}"
      - post:
          url: "/post/posts/{{user_id}}/11"
          json:
            user_id: "{{user_id}}"
            biz_price: "{{biz_price}}"
# config:
#   target: "http://localhost:5000" # 애플리케이션의 POST 엔드포인트 URL로 대체하세요
#   phases:
#     - duration: 1 # 테스트 지속 시간 (초)
#       arrivalRate: 100 # 초당 100명의 연결 수
#   defaults:
#     headers:
#       Content-Type: "application/json"

# scenarios:
#   - name: "WebSocket and POST Test"
#     flow:
#       - loop:
#           times: 100 # 60초 동안 100명씩 총 6000번의 데이터 반복 사용 (100명 x 60초 = 6000)
#           counter: "loopIndex"
#           variable: "data"
#           file: "./data.csv" # 더미 데이터가 들어 있는 data.csv 파일의 경로로 대체하세요
#       - emit:
#           channel: "message"
#           data:
#             user_id: "{{ data.user_id }}" # 더미 데이터의 post_id 컬럼 값을 사용합니다
#             biz_price: "{{ data.biz_price }}" # 더미 데이터의 biz_price 컬럼 값을 사용합니다
#       - think: 0.01 # 응답을 기다리지 않고 다음 요청을 바로 보냅니다 (0.01초 대기)
#       - post:
#           url: "/post/posts/{{ data.user_id }}/11" # 더미 데이터의 user_id 컬럼 값을 사용합니다
#           json:
#             post_id: "{{ loopIndex }}" # 더미 데이터의 post_id 컬럼 값을 사용합니다
#             biz_price: "{{ data.biz_price }}" # 더미 데이터의 biz_price 컬럼 값을 사용합니다
#       - think: 0.01 # 응답을 기다리지 않고 다음 요청을 바로 보냅니다 (0.01초 대기)
