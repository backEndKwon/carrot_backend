# # ###-------------------
config:
  target: 'ws://localhost:5000'
  ensure:
    max: 500 # fail if max response time exceeds 500ms
    maxErrorRate: 1 
  socketio:
    transports: ['websocket']
  processor: './data.js'
  # target: 'http://localhost:5000'
  phases:
    - duration: 1
      arrivalRate: 10
  # engine: socketio-v3
  # payloads:
  #   path: 'data.csv'
  #   # parser:
  #   #   delimiter: "," # CSV 파일의 필드를 구분하는 문자 (기본값: 쉼표)
  #   #   encoding: "utf8" # CSV 파일의 인코딩 (기본값: utf8)
  #   # socketio:
  #   #   socket: "94-B_EabY7kBBCwDAAAH"
  #   fields:
  #     - "{{ user_id }}"
  #     - "{{ price }}"
  #   order: true
      
scenarios:
  - engine: "socketio"
    flow:
      - function: "data"
      - log: 'user_id: {{ user_id }}, price: {{ price }}'
# scenarios:
#   - engine: 'socketio'
#     # engine: socketio-v3
#     flow:
#       # - loop:
#       # count: 1
#       # - think: 3
#       - log: '===========>"{{ user_id }}"'
#       - funciton: 'updateBizPrice'
      - emit:
          channel: 'sendPrice'
          data: 
            user_id: "{{ user_id }}"
            price: "{{ price }}"
            post_id: 6019
# #             # user_id: 888
# #             # price: 8990
# #             # post_id: 6019
# ##-------------------










#   target: "http://localhost:5000"
#   phases:
#     - duration: 60
#       arrivalRate: 10
#   plugins:
#     socketio-v3: {}
#   payloads:
#     - path: "./data.csv"
#       fields:
#         - "user_id"
#         - "post_id"
#         - "price"

# scenarios:
#   - name: test scenario
#   - engine: socketio-v3
#     flow:
#       # - think: 1
#       - emit:
#           channel: "sendPrice"
#           data:
#             user_id: "{{ user_id }}"
#             post_id: "{{ post_id }}"
#             price: "{{ price }}"
#       - on:
#           channel: "sendPriceToClient"
#           handler: responseHandler

# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 1
#       arrivalRate: 5
#       name: "Main Test"
#   payload:
#     path: "data.csv"
#     fields:
#       - "user_id"
#       - "biz_price"
#       - "post_id"

# scenarios:
#   - name: "가격입찰 부하 테스트 scenario"
#     engine: socketio
#     flow:
#       - post:
#           url: "/post/posts/{{ user_id }}/{{ post_id }}"
#           data:
#             user_id: "{{ user_id }}"
#             post_id: "{{ post_id }}"
#             biz_price: "{{ biz_price }}"
#       - emit:
#           channel: "sendPrice"
#           data:
#             user_id: "{{ user_id }}"
#             post_id: "{{ post_id }}"
#             price: "{{ biz_price }}"

# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 1
#       arrivalRate: 100
#   defaults:
#     headers:
#       Content-Type: "application/json"
# scenarios:
#   - flow:
#     - post:
#         url: "/post/posts/{{user_id}}/11"
#         body: "user_id={{user_id}}&post_id=11&biz_price={{biz_price}}"
#     - emit:
#         channel: "sendPrice"
#         data: "data"
#   socketio:
#     transports: ["websocket"]
#     query: "id=B3dejqrMy6HDMRycAAMh"
#   phases:
#     # # 8초 동안 60명의 사용자가 요청 = 480번의 요청
#     # - arrivalRate: 60     # 가상 사용자 수 = 쓰레드 수
#     #   duration: 8         # second
#     # 1초 동안 100명의 사용자가 요청 = 100번의 요청
#     - duration: 1         # second
#       arrivalRate: 100     # 가상 사용자 수 = 쓰레드 수
#   payload:
#     path: "data.csv"
#     fields:
#       - "user_id"
#       - "biz_price"
# scenarios:
#   - name: "가격입찰 부하 테스트 "
#     engine: "socketio"
#     flow:
#       - post:
#           url: "/post/posts/{{user_id}}/11"

#       - emit:
#           channel: "sendPrice"
#           data:
#             user_id: "{{user_id}}"
#             post_id: "11"
#             biz_price: "{{biz_price}}"
# config:
#   target: "http://localhost:5000" # 애플리케이션의 POST 엔드포인트 URL로 대체하세요
#   phases:
#     - duration: 1 # 테스트 지속 시간 (초)
#       arrivalRate: 100 # 초당 100명의 연결 수
#   defaults:
#     headers:
#       Content-Type: "application/json"

# scenarios:
#   - name: "WebSocket and POST Test"
#     flow:
#       - loop:
#           times: 100 # 60초 동안 100명씩 총 6000번의 데이터 반복 사용 (100명 x 60초 = 6000)
#           counter: "loopIndex"
#           variable: "data"
#           file: "./data.csv" # 더미 데이터가 들어 있는 data.csv 파일의 경로로 대체하세요
#       - emit:
#           channel: "message"
#           data:
#             user_id: "{{ data.user_id }}" # 더미 데이터의 post_id 컬럼 값을 사용합니다
#             biz_price: "{{ data.biz_price }}" # 더미 데이터의 biz_price 컬럼 값을 사용합니다
#       - think: 0.01 # 응답을 기다리지 않고 다음 요청을 바로 보냅니다 (0.01초 대기)
#       - post:
#           url: "/post/posts/{{ data.user_id }}/11" # 더미 데이터의 user_id 컬럼 값을 사용합니다
#           json:
#             post_id: "{{ loopIndex }}" # 더미 데이터의 post_id 컬럼 값을 사용합니다
#             biz_price: "{{ data.biz_price }}" # 더미 데이터의 biz_price 컬럼 값을 사용합니다
#       - think: 0.01 # 응답을 기다리지 않고 다음 요청을 바로 보냅니다 (0.01초 대기)
